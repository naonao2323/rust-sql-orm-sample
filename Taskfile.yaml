version: '3'

# container up -> build arthifact
# container up -> test
# container up -> migration

env:
  DATABASE_URL: mysql://root:root@localhost:3305/app
  DATABASE_USER_NAME: root
  DATABASE_USER_PASS: root
  DATABASE_NAME: app

tasks: 
  default:
    desc: show commands
    cmds:
      - task -l --sort none
  up:
    desc: build arthifact
    deps:
      - task: mig-up
      - task: prisma
    cmds:
      - task: build-rust-package
        vars: {PACKAGE: 'diesel_test'}
      - task: build-rust-package
        vars: {PACKAGE: 'prisma_test'}
      - task: build-rust-package
        vars: {PACKAGE: 'sqlx_test'}
      - task: build-rust-package
        vars: {PACKAGE: 'sea_orm_test'}
  down:
    desc: delete container and value 
    dir: '{{.USER_WORKING_DIR}}'
    cmds:
      - docker-compose down --rmi all --volumes --remove-orphans
  test:
    desc: run all test
    dir: '{{.USER_WORKING_DIR}}'
    deps:
      - task: mig-up
    cmds:
      - task: test-rust-package
        vars: {PACKAGE: 'diesel_test'}
      - task: test-rust-package
        vars: {PACKAGE: 'prisma_test'}
      - task: test-rust-package
        vars: {PACKAGE: 'sqlx_test'}
      - task: test-rust-package
        vars: {PACKAGE: 'sea_orm_test'}
  mig-up:
    desc: migrate up by atlas
    deps: [container-up]
    dir: '{{.USER_WORKING_DIR}}/migrator'
    cmds:
      - atlas migrate apply --env local
    required:
      vars: [TARGET]
  mig-diff:
    desc: generate migration file by atlas
    deps: [container-up]
    dir: '{{.USER_WORKING_DIR}}/migrator'
    cmds:
      - atlas migrate diff create_users --dir "file://migrations" --to "file://schema/schema.hcl" --dev-url "docker://mysql/8/dev"
  mig-plan:
    desc: show migration plan by atlas
    dir: '{{.USER_WORKING_DIR}}/migrator'
    cmds:
      -  atlas schema diff --env local --dev-url "docker://mysql/8/dev" --from {{.DATABASE_URL}} --to "file://migrations"
  mig-dry:
    desc: dry run migration by atlas
    dir: '{{.USER_WORKING_DIR}}/migrator'
    cmds:
      - atlas migrate apply --env local --dry-run
  mig-down:
    desc: migration down
    dir: '{{.USER_WORKING_DIR}}/migrator'
    cmds:
      - atlas migrate down --env local
  mig-rehash:
    desc: atras rehash
    dir: '{{.USER_WORKING_DIR}}/migrator'
    cmds:
      - atlas migrate hash
  prisma:
    decs: generarte prisma entity
    dir: '{{.USER_WORKING_DIR}}/prisma_test'
    cmds:
      - cargo prisma generate
  prisma-push:
    decs: push prisma migrate
    dir: '{{.USER_WORKING_DIR}}/prisma_test'
    cmds:
      - cargo prisma db push
  run-pkg:
    desc: run package -- package name
    dir: '{{ .USER_WORKING_DIR }}/{{ .CLI_ARGS }}'
    cmds:
      - cargo run
  test-pkg:
    desc: run package -- package name
    dir: '{{ .USER_WORKING_DIR }}/{{ .CLI_ARGS }}'
    deps:
      - task: mig-up
    cmds:
      - cargo test -- --nocapture
  container-up:
    desc: container up
    run: once
    dir: '{{.USER_WORKING_DIR}}'
    cmds:
      - docker compose up -d
    stauts:
      - test -f ./docker-compose.yaml
    silent: true
  diesel-mig-generate:
    desc: generate file by diesel -- filename
    dir: '{{.USER_WORKING_DIR}}/diesel_test'
    cmds:
      - diesel migration generate {{ .CLI_ARGS }}
  diesel-mig-up:
    desc: migration by diesel
    dir: '{{.USER_WORKING_DIR}}/diesel_test'
    cmds:
      - diesel migration run --database-url mysql://root:root@mysql:3305/app
  diesel-mig-down:
    desc: migration by diesel
    dir: '{{.USER_WORKING_DIR}}/diesel_test'
    cmds:
      - diesel migration revert --database-url mysql://root:root@mysql:3305/app
  sqlx-mig-generate:
    desc: generate migration file by sqlx -- filename
    dir: '{{.USER_WORKING_DIR}}/sqlx_test'
    cmds:
      - sqlx migrate add {{ .CLI_ARGS }}
  sqlx-mig-up:
    desc: migrate by sqlx
    dir: '{{.USER_WORKING_DIR}}/sqlx_test'
    cmds: 
      - sqlx migrate run
  sqlx-mig-down:
    desc: migrate down by sqlx
    dir: '{{.USER_WORKING_DIR}}/sqlx_test'
    cmds:
      - sqlx migrate revert
  sea-mig-generate:
    desc: generatea migration by sea-orm --filename
    dir: '{{.USER_WORKING_DIR}}/sea_orm_test'
    cmds:
      - sea-orm-cli migrate generate {{ .CLI_ARGS }}
  sea-mig-up:
    desc: migrate up by sea-orm
    dir: '{{.USER_WORKING_DIR}}/sea_orm_test'
    cmds:
      - sea-orm-cli migrate up
  sea-mig-down:
    desc: migrate down by sea-orm
    dir: '{{.USER_WORKING_DIR}}/sea_orm_test'
    cmds:
      - sea-orm-cli migrate down
  golang-mig-create:
    desc: create migration file -- fine name
    dir: '{{.USER_WORKING_DIR}}/golang-migrate'
    cmds:
      - migrate create -ext sql -dir ./migrations -seq {{ .CLI_ARGS }}
  golang-mig-up:
    desc: migrate by golang-migrate
    dir: '{{.USER_WORKING_DIR}}/golang-migrate'
    cmds:
      - migrate -path ./migrations -database "mysql://root:root@tcp(localhost:3305)/app" up
  golang-mig-down:
    desc: migrate by golang-migrate
    dir: '{{.USER_WORKING_DIR}}/golang-migrate'
    cmds:
      - migrate -path ./migrations -database "mysql://root:root@tcp(localhost:3305)/app" down 1
  goose-mig-up:
    desc: migrate by goose
    dir: '{{.USER_WORKING_DIR}}/goose'
    cmds:
      -  GOOSE_DRIVER=mysql GOOSE_DBSTRING="root:root@tcp(localhost:3305)/app" goose -dir ./migrations up
  goose-mig-status:
    desc: show migrate status by goose
    dir: '{{.USER_WORKING_DIR}}/goose'
    cmds:
      -  GOOSE_DRIVER=mysql GOOSE_DBSTRING="root:root@tcp(localhost:3305)/app" goose -dir ./migrations status
  goose-mig-down:
    desc: migrate down by goose -- version
    dir: '{{.USER_WORKING_DIR}}/goose'
    cmds:
      - GOOSE_DRIVER=mysql GOOSE_DBSTRING="root:root@tcp(localhost:3305)/app" goose -dir ./migrations down-to {{ .CLI_ARGS }}
  sqldef-apply:
    desc: migrate apply by sqldef
    dir: '{{.USER_WORKING_DIR}}/sqldef'
    cmds:
      - ./mysqldef -uroot -proot -hmysql -P3305 app < schema.sql

  build-rust-package:
    desc: build rust package
    run: when_changed
    dir: '{{.USER_WORKING_DIR}}/{{.PACKAGE}}'
    cmds: 
      - cargo build
    required:
      vars: [PACKAGE]
    internal: true
  test-rust-package:
    desc: test rust package
    dir: '{{.USER_WORKING_DIR}}/{{.PACKAGE}}'
    cmds: 
      - cargo test
    required:
      vars: [PACKAGE]
    internal: true
 